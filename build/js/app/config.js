'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// TODO Add ranges for settings
// TODO Take settings from JSON
// Full config
define(function () {
  var players = [{ sign: 0, ai: 'none', color: [238, 68, 68] }, { sign: 1, ai: 'hard', color: [51, 85, 255] }];

  var general = {
    defaultRowsCols: 3, emptyVal: 9,
    size: 420, rows: 5, columns: 5, signsPerRound: 1, winLength: 4,
    top: 20, right: 20, bottom: 20, left: 20,
    get maxLineLength() {
      return Math.min(this.rows, this.columns);
    },
    get maxTurns() {
      return this.rows * this.columns;
    },
    get turnsPerRound() {
      return players.length * this.signsPerRound;
    },
    get minTurnsForTie() {
      return Math.max(this.rows, this.columns) * 2;
    }
  };

  var elements = {
    line: {
      imgID: [[0, 1, 2, 3]],
      random: { move: 10, rotate: 0.08, scale: 0.08 },
      frames: { total: 6, inline: 1, fps: 30 },
      color: [0, 0, 0],
      pause: 160
    },
    sign: {
      imgID: [[4], [5]],
      random: { move: 8, rotate: 0.12, scale: 0.1 },
      frames: { total: 1, inline: 1, fps: 30 },
      color: [0, 0, 0],
      pause: 200
    }
  };

  var assets = {
    images: ['img/line-0.png', 'img/line-1.png', 'img/line-2.png', 'img/line-3.png', 'img/sign-x-0.png', 'img/sign-o-0.png']
  };

  var ai = {
    none: {
      depth: 0, tolerance: 0,
      score: { sign: [0, 0, 0], win: 0, tie: 0 }
    },
    hard: {
      depth: 5, tolerance: 5,
      score: { sign: [6, 5, 4], win: 10000, tie: 100 }
    },
    normal: {
      depth: 3, tolerance: 10,
      score: { sign: [6, 5], win: 1000, tie: 50 }
    },
    easy: {
      depth: 1, tolerance: 30,
      score: { sign: [5], win: 100, tie: 10 }
    }
  };

  Object.keys(ai).forEach(function (p) {
    var s = ai[p].score.sign;
    ai[p].score.sign = Object.assign(Array.apply(undefined, players).fill(Math.min.apply(Math, _toConsumableArray(s))), s);
  });

  return { general: general, players: players, elements: elements, assets: assets, ai: ai };
});
//# sourceMappingURL=data:application/json;base64,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TyxFQUFFLE1BQU0sQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFSLEVBQWdCLEtBQUssSUFBckIsRUFBMkIsS0FBSyxFQUFoQztBQUZELEtBVEM7QUFhVCxVQUFNO0FBQ0osYUFBTyxDQURILEVBQ00sV0FBVyxFQURqQjtBQUVKLGFBQU8sRUFBRSxNQUFNLENBQUMsQ0FBRCxDQUFSLEVBQWEsS0FBSyxHQUFsQixFQUF1QixLQUFLLEVBQTVCO0FBRkg7QUFiRyxHQUFYOztBQW1CQSxTQUFPLElBQVAsQ0FBWSxFQUFaLEVBQWdCLE9BQWhCLENBQXdCLGFBQUs7QUFDM0IsUUFBTSxJQUFJLEdBQUcsQ0FBSCxFQUFNLEtBQU4sQ0FBWSxJQUF0QjtBQUNBLE9BQUcsQ0FBSCxFQUFNLEtBQU4sQ0FBWSxJQUFaLEdBQW1CLE9BQU8sTUFBUCxDQUFjLHVCQUFTLE9BQVQsRUFBa0IsSUFBbEIsQ0FBdUIsS0FBSyxHQUFMLGdDQUFZLENBQVosRUFBdkIsQ0FBZCxFQUFzRCxDQUF0RCxDQUFuQjtBQUNELEdBSEQ7O0FBS0EsU0FBTyxFQUFFLGdCQUFGLEVBQVcsZ0JBQVgsRUFBb0Isa0JBQXBCLEVBQThCLGNBQTlCLEVBQXNDLE1BQXRDLEVBQVA7QUFDRCxDQWpFRCIsImZpbGUiOiJqcy9hcHAvY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyBBZGQgcmFuZ2VzIGZvciBzZXR0aW5nc1xyXG4vLyBUT0RPIFRha2Ugc2V0dGluZ3MgZnJvbSBKU09OXHJcbi8vIEZ1bGwgY29uZmlnXHJcbmRlZmluZSgoKSA9PiB7XHJcbiAgY29uc3QgcGxheWVycyA9IFtcclxuICAgIHsgc2lnbjogMCwgYWk6ICdub25lJywgY29sb3I6IFsyMzgsIDY4LCA2OF0gfSxcclxuICAgIHsgc2lnbjogMSwgYWk6ICdoYXJkJywgY29sb3I6IFs1MSwgODUsIDI1NV0gfSxcclxuICBdO1xuXHJcbiAgY29uc3QgZ2VuZXJhbCA9IHtcclxuICAgIGRlZmF1bHRSb3dzQ29sczogMywgZW1wdHlWYWw6IDksXHJcbiAgICBzaXplOiA0MjAsIHJvd3M6IDUsIGNvbHVtbnM6IDUsIHNpZ25zUGVyUm91bmQ6IDEsIHdpbkxlbmd0aDogNCxcclxuICAgIHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAyMCwgbGVmdDogMjAsXHJcbiAgICBnZXQgbWF4TGluZUxlbmd0aCgpIHsgcmV0dXJuIE1hdGgubWluKHRoaXMucm93cywgdGhpcy5jb2x1bW5zKTsgfSxcclxuICAgIGdldCBtYXhUdXJucygpIHsgcmV0dXJuIHRoaXMucm93cyAqIHRoaXMuY29sdW1uczsgfSxcclxuICAgIGdldCB0dXJuc1BlclJvdW5kKCkgeyByZXR1cm4gcGxheWVycy5sZW5ndGggKiB0aGlzLnNpZ25zUGVyUm91bmQ7IH0sXHJcbiAgICBnZXQgbWluVHVybnNGb3JUaWUoKSB7IHJldHVybiBNYXRoLm1heCh0aGlzLnJvd3MsIHRoaXMuY29sdW1ucykgKiAyOyB9LFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGVsZW1lbnRzID0ge1xyXG4gICAgbGluZToge1xyXG4gICAgICBpbWdJRDogW1swLCAxLCAyLCAzXV0sXHJcbiAgICAgIHJhbmRvbTogeyBtb3ZlOiAxMCwgcm90YXRlOiAwLjA4LCBzY2FsZTogMC4wOCB9LFxyXG4gICAgICBmcmFtZXM6IHsgdG90YWw6IDYsIGlubGluZTogMSwgZnBzOiAzMCB9LFxyXG4gICAgICBjb2xvcjogWzAsIDAsIDBdLFxyXG4gICAgICBwYXVzZTogMTYwLFxyXG4gICAgfSxcclxuICAgIHNpZ246IHtcclxuICAgICAgaW1nSUQ6IFtbNF0sIFs1XV0sXHJcbiAgICAgIHJhbmRvbTogeyBtb3ZlOiA4LCByb3RhdGU6IDAuMTIsIHNjYWxlOiAwLjEgfSxcclxuICAgICAgZnJhbWVzOiB7IHRvdGFsOiAxLCBpbmxpbmU6IDEsIGZwczogMzAgfSxcclxuICAgICAgY29sb3I6IFswLCAwLCAwXSxcclxuICAgICAgcGF1c2U6IDIwMCxcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgYXNzZXRzID0ge1xyXG4gICAgaW1hZ2VzOiBbXHJcbiAgICAgICdpbWcvbGluZS0wLnBuZycsICdpbWcvbGluZS0xLnBuZycsICdpbWcvbGluZS0yLnBuZycsXHJcbiAgICAgICdpbWcvbGluZS0zLnBuZycsICdpbWcvc2lnbi14LTAucG5nJywgJ2ltZy9zaWduLW8tMC5wbmcnLFxyXG4gICAgXSxcclxuICB9O1xyXG5cclxuICBjb25zdCBhaSA9IHtcclxuICAgIG5vbmU6IHtcclxuICAgICAgZGVwdGg6IDAsIHRvbGVyYW5jZTogMCxcclxuICAgICAgc2NvcmU6IHsgc2lnbjogWzAsIDAsIDBdLCB3aW46IDAsIHRpZTogMCB9LFxyXG4gICAgfSxcclxuICAgIGhhcmQ6IHtcclxuICAgICAgZGVwdGg6IDUsIHRvbGVyYW5jZTogNSxcclxuICAgICAgc2NvcmU6IHsgc2lnbjogWzYsIDUsIDRdLCB3aW46IDEwMDAwLCB0aWU6IDEwMCB9LFxyXG4gICAgfSxcclxuICAgIG5vcm1hbDoge1xyXG4gICAgICBkZXB0aDogMywgdG9sZXJhbmNlOiAxMCxcclxuICAgICAgc2NvcmU6IHsgc2lnbjogWzYsIDVdLCB3aW46IDEwMDAsIHRpZTogNTAgfSxcclxuICAgIH0sXHJcbiAgICBlYXN5OiB7XHJcbiAgICAgIGRlcHRoOiAxLCB0b2xlcmFuY2U6IDMwLFxyXG4gICAgICBzY29yZTogeyBzaWduOiBbNV0sIHdpbjogMTAwLCB0aWU6IDEwIH0sXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIE9iamVjdC5rZXlzKGFpKS5mb3JFYWNoKHAgPT4ge1xyXG4gICAgY29uc3QgcyA9IGFpW3BdLnNjb3JlLnNpZ247XHJcbiAgICBhaVtwXS5zY29yZS5zaWduID0gT2JqZWN0LmFzc2lnbihBcnJheSguLi5wbGF5ZXJzKS5maWxsKE1hdGgubWluKC4uLnMpKSwgcyk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiB7IGdlbmVyYWwsIHBsYXllcnMsIGVsZW1lbnRzLCBhc3NldHMsIGFpIH07XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
