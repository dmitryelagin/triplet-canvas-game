'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

// TODO Add ranges for settings
// TODO Setting randomizers is untested
// TODO Some values are changed for test, revert them later
// Full config
define(['./utilities'], function (_ref) {
  var random = _ref.random;

  var general = {
    defaultRowsCols: 3, emptyVal: 9,
    size: 420, rows: 5, columns: 5, signsPerRound: 1, winLength: 4,
    top: 20, right: 20, bottom: 20, left: 20
  };

  var players = [{ name: 'Alice', ai: 'none', signID: 'x', color: '#e44' }, { name: 'Bob', ai: 'hard', signID: 'o', color: '#35f' }];

  general.maxLineLength = Math.min(general.rows, general.columns);
  general.maxTurns = general.rows * general.columns;
  general.turnsPerRound = players.length * general.signsPerRound;
  general.minTurnsForTie = Math.max(general.rows, general.columns) * 2;

  var elements = {
    line: {
      random: {
        imgID: [0, 1, 2, 3],
        move: 10, rotate: 0.08, scale: 0.08
      },
      frames: { inRow: 1, total: 6, delay: 30 }, // delay 36
      color: '#000',
      pause: 120 },
    // pause 160
    sign: {
      random: {
        imgID: { x: [4], o: [5] },
        move: 8, rotate: 0.12, scale: 0.1
      },
      frames: { inRow: 1, total: 1, delay: 0 },
      color: '#000',
      pause: 200
    }
  };

  function makeRandomizers(obj) {
    function remakeObj(property, val) {
      Object.defineProperty(obj, property, {
        enumerable: true,
        get: random.makeRandomizer(val),
        set: remakeObj.bind(null, property)
      });
    }
    Object.keys(obj).forEach(function (prop) {
      if (_typeof(obj[prop]) === 'object' && !Array.isArray(obj[prop])) {
        makeRandomizers(obj[prop]);
      } else {
        remakeObj(prop, obj[prop]);
      }
    });
  }

  makeRandomizers(elements.line.random);
  makeRandomizers(elements.sign.random);

  var assets = {
    images: ['img/line-0.png', 'img/line-1.png', 'img/line-2.png', 'img/line-3.png', 'img/sign-x-0.png', 'img/sign-o-0.png']
  };

  var ai = {
    none: {
      score: { sign: [0, 0, 0], win: 0, tie: 0 }, depth: 0, tolerance: 0
    },
    hard: {
      score: { sign: [6, 5, 4], win: 100000, tie: 100 }, depth: 5, tolerance: 5
    },
    normal: {
      score: { sign: [6, 5], win: 10000, tie: 50 }, depth: 3, tolerance: 10
    },
    easy: {
      score: { sign: [5], win: 100, tie: 10 }, depth: 1, tolerance: 30
    }
  };

  Object.keys(ai).forEach(function (p) {
    if (ai[p].score.sign.length < players.length) {
      var last = ai[p].score.sign.pop();
      ai[p].score.sign = ai[p].score.sign.concat(Array(players.length - ai[p].score.sign.length).fill(last));
    }
  });

  return { general: general, players: players, elements: elements, assets: assets, ai: ai };
});
//# sourceMappingURL=data:application/json;base64,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RUFBTSxLQUFOLENBQVksSUFBWixDQUFpQixNQUFqQixDQUNmLE1BQU0sUUFBUSxNQUFSLEdBQWlCLEdBQUcsQ0FBSCxFQUFNLEtBQU4sQ0FBWSxJQUFaLENBQWlCLE1BQXhDLEVBQWdELElBQWhELENBQXFELElBQXJELENBRGUsQ0FBbkI7QUFFRDtBQUNGLEdBTkQ7O0FBUUEsU0FBTyxFQUFFLGdCQUFGLEVBQVcsZ0JBQVgsRUFBb0Isa0JBQXBCLEVBQThCLGNBQTlCLEVBQXNDLE1BQXRDLEVBQVA7QUFDRCxDQXpGRCIsImZpbGUiOiJqcy9hcHAvY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyBBZGQgcmFuZ2VzIGZvciBzZXR0aW5nc1xyXG4vLyBUT0RPIFNldHRpbmcgcmFuZG9taXplcnMgaXMgdW50ZXN0ZWRcclxuLy8gVE9ETyBTb21lIHZhbHVlcyBhcmUgY2hhbmdlZCBmb3IgdGVzdCwgcmV2ZXJ0IHRoZW0gbGF0ZXJcclxuLy8gRnVsbCBjb25maWdcclxuZGVmaW5lKFsnLi91dGlsaXRpZXMnXSwgKHsgcmFuZG9tIH0pID0+IHtcclxuICBjb25zdCBnZW5lcmFsID0ge1xyXG4gICAgZGVmYXVsdFJvd3NDb2xzOiAzLCBlbXB0eVZhbDogOSxcclxuICAgIHNpemU6IDQyMCwgcm93czogNSwgY29sdW1uczogNSwgc2lnbnNQZXJSb3VuZDogMSwgd2luTGVuZ3RoOiA0LFxyXG4gICAgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDIwLCBsZWZ0OiAyMCxcclxuICB9O1xyXG5cclxuICBjb25zdCBwbGF5ZXJzID0gW1xyXG4gICAgeyBuYW1lOiAnQWxpY2UnLCBhaTogJ25vbmUnLCBzaWduSUQ6ICd4JywgY29sb3I6ICcjZTQ0JyB9LFxyXG4gICAgeyBuYW1lOiAnQm9iJywgYWk6ICdoYXJkJywgc2lnbklEOiAnbycsIGNvbG9yOiAnIzM1ZicgfSxcclxuICBdO1xyXG5cclxuICBnZW5lcmFsLm1heExpbmVMZW5ndGggPSBNYXRoLm1pbihnZW5lcmFsLnJvd3MsIGdlbmVyYWwuY29sdW1ucyk7XHJcbiAgZ2VuZXJhbC5tYXhUdXJucyA9IGdlbmVyYWwucm93cyAqIGdlbmVyYWwuY29sdW1ucztcclxuICBnZW5lcmFsLnR1cm5zUGVyUm91bmQgPSBwbGF5ZXJzLmxlbmd0aCAqIGdlbmVyYWwuc2lnbnNQZXJSb3VuZDtcclxuICBnZW5lcmFsLm1pblR1cm5zRm9yVGllID0gTWF0aC5tYXgoZ2VuZXJhbC5yb3dzLCBnZW5lcmFsLmNvbHVtbnMpICogMjtcclxuXHJcbiAgY29uc3QgZWxlbWVudHMgPSB7XHJcbiAgICBsaW5lOiB7XHJcbiAgICAgIHJhbmRvbToge1xyXG4gICAgICAgIGltZ0lEOiBbMCwgMSwgMiwgM10sXHJcbiAgICAgICAgbW92ZTogMTAsIHJvdGF0ZTogMC4wOCwgc2NhbGU6IDAuMDgsXHJcbiAgICAgIH0sXHJcbiAgICAgIGZyYW1lczogeyBpblJvdzogMSwgdG90YWw6IDYsIGRlbGF5OiAzMCB9LCAgLy8gZGVsYXkgMzZcclxuICAgICAgY29sb3I6ICcjMDAwJyxcclxuICAgICAgcGF1c2U6IDEyMCwgIC8vIHBhdXNlIDE2MFxyXG4gICAgfSxcclxuICAgIHNpZ246IHtcclxuICAgICAgcmFuZG9tOiB7XHJcbiAgICAgICAgaW1nSUQ6IHsgeDogWzRdLCBvOiBbNV0gfSxcclxuICAgICAgICBtb3ZlOiA4LCByb3RhdGU6IDAuMTIsIHNjYWxlOiAwLjEsXHJcbiAgICAgIH0sXHJcbiAgICAgIGZyYW1lczogeyBpblJvdzogMSwgdG90YWw6IDEsIGRlbGF5OiAwIH0sXHJcbiAgICAgIGNvbG9yOiAnIzAwMCcsXHJcbiAgICAgIHBhdXNlOiAyMDAsXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2VSYW5kb21pemVycyhvYmopIHtcclxuICAgIGZ1bmN0aW9uIHJlbWFrZU9iaihwcm9wZXJ0eSwgdmFsKSB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6IHJhbmRvbS5tYWtlUmFuZG9taXplcih2YWwpLFxyXG4gICAgICAgIHNldDogcmVtYWtlT2JqLmJpbmQobnVsbCwgcHJvcGVydHkpLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9ialtwcm9wXSkpIHtcclxuICAgICAgICBtYWtlUmFuZG9taXplcnMob2JqW3Byb3BdKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZW1ha2VPYmoocHJvcCwgb2JqW3Byb3BdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBtYWtlUmFuZG9taXplcnMoZWxlbWVudHMubGluZS5yYW5kb20pO1xyXG4gIG1ha2VSYW5kb21pemVycyhlbGVtZW50cy5zaWduLnJhbmRvbSk7XHJcblxyXG4gIGNvbnN0IGFzc2V0cyA9IHtcclxuICAgIGltYWdlczogW1xyXG4gICAgICAnaW1nL2xpbmUtMC5wbmcnLCAnaW1nL2xpbmUtMS5wbmcnLCAnaW1nL2xpbmUtMi5wbmcnLFxyXG4gICAgICAnaW1nL2xpbmUtMy5wbmcnLCAnaW1nL3NpZ24teC0wLnBuZycsICdpbWcvc2lnbi1vLTAucG5nJyxcclxuICAgIF0sXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgYWkgPSB7XHJcbiAgICBub25lOiB7XHJcbiAgICAgIHNjb3JlOiB7IHNpZ246IFswLCAwLCAwXSwgd2luOiAwLCB0aWU6IDAgfSwgZGVwdGg6IDAsIHRvbGVyYW5jZTogMCxcclxuICAgIH0sXHJcbiAgICBoYXJkOiB7XHJcbiAgICAgIHNjb3JlOiB7IHNpZ246IFs2LCA1LCA0XSwgd2luOiAxMDAwMDAsIHRpZTogMTAwIH0sIGRlcHRoOiA1LCB0b2xlcmFuY2U6IDUsXHJcbiAgICB9LFxyXG4gICAgbm9ybWFsOiB7XHJcbiAgICAgIHNjb3JlOiB7IHNpZ246IFs2LCA1XSwgd2luOiAxMDAwMCwgdGllOiA1MCB9LCBkZXB0aDogMywgdG9sZXJhbmNlOiAxMCxcclxuICAgIH0sXHJcbiAgICBlYXN5OiB7XHJcbiAgICAgIHNjb3JlOiB7IHNpZ246IFs1XSwgd2luOiAxMDAsIHRpZTogMTAgfSwgZGVwdGg6IDEsIHRvbGVyYW5jZTogMzAsXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIE9iamVjdC5rZXlzKGFpKS5mb3JFYWNoKHAgPT4ge1xyXG4gICAgaWYgKGFpW3BdLnNjb3JlLnNpZ24ubGVuZ3RoIDwgcGxheWVycy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgbGFzdCA9IGFpW3BdLnNjb3JlLnNpZ24ucG9wKCk7XHJcbiAgICAgIGFpW3BdLnNjb3JlLnNpZ24gPSBhaVtwXS5zY29yZS5zaWduLmNvbmNhdChcclxuICAgICAgICAgIEFycmF5KHBsYXllcnMubGVuZ3RoIC0gYWlbcF0uc2NvcmUuc2lnbi5sZW5ndGgpLmZpbGwobGFzdCkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4geyBnZW5lcmFsLCBwbGF5ZXJzLCBlbGVtZW50cywgYXNzZXRzLCBhaSB9O1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
