'use strict';

// Picture graphic element constructor
// TODO Function should work if colorization failed
TRIPLET.Sprite = function () {

  var cfg = TRIPLET.config.general,
      uobj = TRIPLET.utilities.object,
      images = TRIPLET.assets.images.pool,
      Sprite;

  Sprite = function Sprite(setup) {

    var ratio;

    this.image = images[setup.imgID];
    try {
      this.changeColor(setup.color || '#000');
    } catch (err) {}

    ratio = Math.max(setup.container.width, setup.container.height) / Math.max(this.image.width, this.image.height) || 1;

    this.angle = parseFloat(setup.angle) || 0;
    this.center = uobj.propFromTo(setup.center, { x: 0, y: 0 });
    this.scale = uobj.propFromTo(setup.scale, { width: 1, height: 1 });
    this.frames = uobj.propFromTo(setup.frames, {
      inRow: 1, total: 1, delay: 0, current: -1
    });
    this.frames.width = this.image.width / this.frames.inRow;
    this.frames.height = this.image.height / Math.ceil(this.frames.total / this.frames.inRow);
    this.width = this.frames.width * ratio;
    this.height = this.frames.height * ratio;
    this.dx = -this.width / 2;
    this.dy = -this.height / 2;

    Object.freeze(this);
  };

  Sprite.prototype = {

    constructor: Sprite,

    changeColor: function changeColor(color) {

      var canvas = document.createElement('canvas'),
          context = canvas.getContext('2d'),
          newImage = new Image(),
          i,
          imgData,
          fillData;
      canvas.width = this.image.width;
      canvas.height = this.image.height;

      context.drawImage(this.image, 0, 0);
      imgData = context.getImageData(0, 0, canvas.width, canvas.height);

      context.fillStyle = color;
      context.fillRect(0, 0, canvas.width, canvas.height);
      fillData = context.getImageData(0, 0, canvas.width, canvas.height);

      for (i = imgData.data.length; i--;) {
        if (i % 4 === 3) fillData.data[i] = imgData.data[i];
      }context.putImageData(fillData, 0, 0);
      newImage.src = canvas.toDataURL('image/png');
      this.image = newImage;
    }

  };

  return Sprite;
}();
//# sourceMappingURL=data:application/json;base64,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LFNBQVIsR0FBb0IsS0FBcEI7QUFDQSxjQUFRLFFBQVIsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsT0FBTyxLQUE5QixFQUFxQyxPQUFPLE1BQTVDO0FBQ0EsaUJBQVcsUUFBUSxZQUFSLENBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLE9BQU8sS0FBbEMsRUFBeUMsT0FBTyxNQUFoRCxDQUFYOztBQUVBLFdBQUssSUFBSSxRQUFRLElBQVIsQ0FBYSxNQUF0QixFQUE4QixHQUE5QjtBQUNFLFlBQUksSUFBSSxDQUFKLEtBQVUsQ0FBZCxFQUFpQixTQUFTLElBQVQsQ0FBYyxDQUFkLElBQW1CLFFBQVEsSUFBUixDQUFhLENBQWIsQ0FBbkI7QUFEbkIsT0FHQSxRQUFRLFlBQVIsQ0FBcUIsUUFBckIsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEM7QUFDQSxlQUFTLEdBQVQsR0FBZSxPQUFPLFNBQVAsQ0FBaUIsV0FBakIsQ0FBZjtBQUNBLFdBQUssS0FBTCxHQUFhLFFBQWI7QUFFRDs7QUEzQmdCLEdBQW5COztBQStCQSxTQUFPLE1BQVA7QUFFQyxDQXRFZ0IsRUFBakIiLCJmaWxlIjoianMvc3ByaXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUGljdHVyZSBncmFwaGljIGVsZW1lbnQgY29uc3RydWN0b3JcclxuLy8gVE9ETyBGdW5jdGlvbiBzaG91bGQgd29yayBpZiBjb2xvcml6YXRpb24gZmFpbGVkXHJcblRSSVBMRVQuU3ByaXRlID0gKGZ1bmN0aW9uKCkge1xyXG5cclxudmFyIGNmZyA9IFRSSVBMRVQuY29uZmlnLmdlbmVyYWwsXHJcbiAgICB1b2JqID0gVFJJUExFVC51dGlsaXRpZXMub2JqZWN0LFxyXG4gICAgaW1hZ2VzID0gVFJJUExFVC5hc3NldHMuaW1hZ2VzLnBvb2wsXHJcbiAgICBTcHJpdGU7XHJcblxyXG5TcHJpdGUgPSBmdW5jdGlvbihzZXR1cCkge1xyXG5cclxuICB2YXIgcmF0aW87XHJcblxyXG4gIHRoaXMuaW1hZ2UgPSBpbWFnZXNbc2V0dXAuaW1nSURdO1xyXG4gIHRyeSB7XHJcbiAgICB0aGlzLmNoYW5nZUNvbG9yKHNldHVwLmNvbG9yIHx8ICcjMDAwJyk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7fVxyXG5cclxuICByYXRpbyA9IE1hdGgubWF4KHNldHVwLmNvbnRhaW5lci53aWR0aCwgc2V0dXAuY29udGFpbmVyLmhlaWdodCkgL1xyXG4gICAgICBNYXRoLm1heCh0aGlzLmltYWdlLndpZHRoLCB0aGlzLmltYWdlLmhlaWdodCkgfHwgMTtcclxuXHJcbiAgdGhpcy5hbmdsZSA9IHBhcnNlRmxvYXQoc2V0dXAuYW5nbGUpIHx8IDA7XHJcbiAgdGhpcy5jZW50ZXIgPSB1b2JqLnByb3BGcm9tVG8oc2V0dXAuY2VudGVyLCB7IHg6IDAsIHk6IDAgfSk7XHJcbiAgdGhpcy5zY2FsZSA9IHVvYmoucHJvcEZyb21UbyhzZXR1cC5zY2FsZSwgeyB3aWR0aDogMSwgaGVpZ2h0OiAxIH0pO1xyXG4gIHRoaXMuZnJhbWVzID0gdW9iai5wcm9wRnJvbVRvKHNldHVwLmZyYW1lcywge1xyXG4gICAgaW5Sb3c6IDEsIHRvdGFsOiAxLCBkZWxheTogMCwgY3VycmVudDogLTFcclxuICB9KTtcclxuICB0aGlzLmZyYW1lcy53aWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGggLyB0aGlzLmZyYW1lcy5pblJvdztcclxuICB0aGlzLmZyYW1lcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodCAvXHJcbiAgICBNYXRoLmNlaWwodGhpcy5mcmFtZXMudG90YWwgLyB0aGlzLmZyYW1lcy5pblJvdyk7XHJcbiAgdGhpcy53aWR0aCA9IHRoaXMuZnJhbWVzLndpZHRoICogcmF0aW87XHJcbiAgdGhpcy5oZWlnaHQgPSB0aGlzLmZyYW1lcy5oZWlnaHQgKiByYXRpbztcclxuICB0aGlzLmR4ID0gLXRoaXMud2lkdGggLyAyO1xyXG4gIHRoaXMuZHkgPSAtdGhpcy5oZWlnaHQgLyAyO1xyXG5cclxuICBPYmplY3QuZnJlZXplKHRoaXMpO1xyXG5cclxufTtcclxuXHJcblNwcml0ZS5wcm90b3R5cGUgPSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yOiBTcHJpdGUsXHJcblxyXG4gIGNoYW5nZUNvbG9yOiBmdW5jdGlvbihjb2xvcikge1xyXG5cclxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcclxuICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXHJcbiAgICAgICAgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UoKSxcclxuICAgICAgICBpLCBpbWdEYXRhLCBmaWxsRGF0YTtcclxuICAgIGNhbnZhcy53aWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQ7XHJcblxyXG4gICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICBpbWdEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgZmlsbERhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgIGZvciAoaSA9IGltZ0RhdGEuZGF0YS5sZW5ndGg7IGktLTspXHJcbiAgICAgIGlmIChpICUgNCA9PT0gMykgZmlsbERhdGEuZGF0YVtpXSA9IGltZ0RhdGEuZGF0YVtpXTtcclxuXHJcbiAgICBjb250ZXh0LnB1dEltYWdlRGF0YShmaWxsRGF0YSwgMCwgMCk7XHJcbiAgICBuZXdJbWFnZS5zcmMgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKTtcclxuICAgIHRoaXMuaW1hZ2UgPSBuZXdJbWFnZTtcclxuXHJcbiAgfVxyXG5cclxufTtcclxuXHJcbnJldHVybiBTcHJpdGU7XHJcblxyXG59KSgpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
