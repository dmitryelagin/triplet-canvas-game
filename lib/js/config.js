'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

// TODO Maybe merge general and rules
// TODO Setting randomizers is untested
// TODO Some values are changed for test, revert them later
// Full config
TRIPLET.config = {

  general: {
    rows: 5, columns: 5, defaultRowsCols: 3, size: 420,
    top: 20, right: 20, bottom: 20, left: 20
  },

  rules: {
    emptyVal: 9, signsPerRound: 1, winLength: 4
  },

  players: [{ name: 'Alice', ai: 'none', signID: 'x', color: '#e44' }, { name: 'Bob', ai: 'hard', signID: 'o', color: '#35f' }],

  element: {
    line: {
      random: {
        imgID: [0, 1, 2, 3],
        move: 10, rotate: 0.08, scale: 0.08
      },
      frames: { inRow: 1, total: 6, delay: 30 }, // delay 36
      color: '#000',
      pause: 120 // pause 160
    },
    sign: {
      random: {
        imgID: { x: [4], o: [5] },
        move: 8, rotate: 0.12, scale: 0.1
      },
      frames: { inRow: 1, total: 1, delay: 0 },
      color: '#000',
      pause: 200
    }
  },

  assets: {
    images: ['img/line-0.png', 'img/line-1.png', 'img/line-2.png', 'img/line-3.png', 'img/sign-x-0.png', 'img/sign-o-0.png']
  },

  ai: {
    none: {
      score: {
        sign: { own: 0, enemy: 0, mainEnemy: 0 }, win: 0, tie: 0
      }, depth: 0, tolerance: 0
    },
    hard: {
      score: {
        sign: { own: 6, enemy: 4, mainEnemy: 5 }, win: 100000, tie: 100
      }, depth: 5, tolerance: 5
    },
    normal: {
      score: {
        sign: { own: 5, enemy: 5, mainEnemy: 5 }, win: 10000, tie: 50
      }, depth: 3, tolerance: 10
    },
    easy: {
      score: {
        sign: { own: 5, enemy: 5, mainEnemy: 5 }, win: 100, tie: 10
      }, depth: 1, tolerance: 30
    }
  },

  init: function init() {

    var random = TRIPLET.utilities.random;

    function makeRandomizers(obj) {
      var prop;
      function remakeObj(property, val) {
        Object.defineProperty(obj, property, {
          enumerable: true,
          get: random.makeRandomizer(val),
          set: remakeObj.bind(null, property)
        });
      }
      for (prop in obj) {
        if (_typeof(obj[prop]) === 'object' && !Array.isArray(obj[prop])) makeRandomizers(obj[prop]);else remakeObj(prop, obj[prop]);
      }
    }

    (function (self, cfg, rule) {
      cfg.maxLineLength = Math.min(cfg.rows, cfg.columns);
      cfg.maxTurns = cfg.rows * cfg.columns;
      rule.turnsPerRound = self.players.length * rule.signsPerRound;
      rule.minTurnsForTie = Math.max(cfg.rows, cfg.columns) * 2;
    })(this, this.general, this.rules);

    (function (elem) {
      makeRandomizers(elem.line.random);
      makeRandomizers(elem.sign.random);
    })(this.element);

    delete this.init;
    return this;
  }

}.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2NvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLFFBQVEsTUFBUixHQUFrQjs7QUFFaEIsV0FBUztBQUNQLFVBQU0sQ0FEQyxFQUNFLFNBQVMsQ0FEWCxFQUNjLGlCQUFpQixDQUQvQixFQUNrQyxNQUFNLEdBRHhDO0FBRVAsU0FBSyxFQUZFLEVBRUUsT0FBTyxFQUZULEVBRWEsUUFBUSxFQUZyQixFQUV5QixNQUFNO0FBRi9CLEdBRk87O0FBT2hCLFNBQU87QUFDTCxjQUFVLENBREwsRUFDUSxlQUFlLENBRHZCLEVBQzBCLFdBQVc7QUFEckMsR0FQUzs7QUFXaEIsV0FBUyxDQUNQLEVBQUUsTUFBTSxPQUFSLEVBQWlCLElBQUksTUFBckIsRUFBNkIsUUFBUSxHQUFyQyxFQUEwQyxPQUFPLE1BQWpELEVBRE8sRUFFUCxFQUFFLE1BQU0sS0FBUixFQUFlLElBQUksTUFBbkIsRUFBMkIsUUFBUSxHQUFuQyxFQUF3QyxPQUFPLE1BQS9DLEVBRk8sQ0FYTzs7QUFnQmhCLFdBQVM7QUFDUCxVQUFNO0FBQ0osY0FBUTtBQUNOLGVBQU8sQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBREQ7QUFFTixjQUFNLEVBRkEsRUFFSSxRQUFRLElBRlosRUFFa0IsT0FBTztBQUZ6QixPQURKO0FBS0osY0FBUSxFQUFFLE9BQU8sQ0FBVCxFQUFZLE9BQU8sQ0FBbkIsRUFBc0IsT0FBTyxFQUE3QixFQUxKLEU7QUFNSixhQUFPLE1BTkg7QUFPSixhQUFPLEc7QUFQSCxLQURDO0FBVVAsVUFBTTtBQUNKLGNBQVE7QUFDTixlQUFPLEVBQUUsR0FBRyxDQUFDLENBQUQsQ0FBTCxFQUFVLEdBQUcsQ0FBQyxDQUFELENBQWIsRUFERDtBQUVOLGNBQU0sQ0FGQSxFQUVHLFFBQVEsSUFGWCxFQUVpQixPQUFPO0FBRnhCLE9BREo7QUFLSixjQUFRLEVBQUUsT0FBTyxDQUFULEVBQVksT0FBTyxDQUFuQixFQUFzQixPQUFPLENBQTdCLEVBTEo7QUFNSixhQUFPLE1BTkg7QUFPSixhQUFPO0FBUEg7QUFWQyxHQWhCTzs7QUFxQ2hCLFVBQVE7QUFDTixZQUFRLENBQ04sZ0JBRE0sRUFFTixnQkFGTSxFQUdOLGdCQUhNLEVBSU4sZ0JBSk0sRUFLTixrQkFMTSxFQU1OLGtCQU5NO0FBREYsR0FyQ1E7O0FBZ0RoQixNQUFJO0FBQ0YsVUFBTTtBQUNKLGFBQU87QUFDTCxjQUFNLEVBQUUsS0FBSyxDQUFQLEVBQVUsT0FBTyxDQUFqQixFQUFvQixXQUFXLENBQS9CLEVBREQsRUFDcUMsS0FBSyxDQUQxQyxFQUM2QyxLQUFLO0FBRGxELE9BREgsRUFHRCxPQUFPLENBSE4sRUFHUyxXQUFXO0FBSHBCLEtBREo7QUFNRixVQUFNO0FBQ0osYUFBTztBQUNMLGNBQU0sRUFBRSxLQUFLLENBQVAsRUFBVSxPQUFPLENBQWpCLEVBQW9CLFdBQVcsQ0FBL0IsRUFERCxFQUNxQyxLQUFLLE1BRDFDLEVBQ2tELEtBQUs7QUFEdkQsT0FESCxFQUdELE9BQU8sQ0FITixFQUdTLFdBQVc7QUFIcEIsS0FOSjtBQVdGLFlBQVE7QUFDTixhQUFPO0FBQ0wsY0FBTSxFQUFFLEtBQUssQ0FBUCxFQUFVLE9BQU8sQ0FBakIsRUFBb0IsV0FBVyxDQUEvQixFQURELEVBQ3FDLEtBQUssS0FEMUMsRUFDaUQsS0FBSztBQUR0RCxPQURELEVBR0gsT0FBTyxDQUhKLEVBR08sV0FBVztBQUhsQixLQVhOO0FBZ0JGLFVBQU07QUFDSixhQUFPO0FBQ0wsY0FBTSxFQUFFLEtBQUssQ0FBUCxFQUFVLE9BQU8sQ0FBakIsRUFBb0IsV0FBVyxDQUEvQixFQURELEVBQ3FDLEtBQUssR0FEMUMsRUFDK0MsS0FBSztBQURwRCxPQURILEVBR0QsT0FBTyxDQUhOLEVBR1MsV0FBVztBQUhwQjtBQWhCSixHQWhEWTs7QUF1RWhCLFFBQU0sZ0JBQVc7O0FBRWYsUUFBSSxTQUFTLFFBQVEsU0FBUixDQUFrQixNQUEvQjs7QUFFQSxhQUFTLGVBQVQsQ0FBeUIsR0FBekIsRUFBOEI7QUFDNUIsVUFBSSxJQUFKO0FBQ0EsZUFBUyxTQUFULENBQW1CLFFBQW5CLEVBQTZCLEdBQTdCLEVBQWtDO0FBQ2hDLGVBQU8sY0FBUCxDQUFzQixHQUF0QixFQUEyQixRQUEzQixFQUFxQztBQUNuQyxzQkFBWSxJQUR1QjtBQUVuQyxlQUFLLE9BQU8sY0FBUCxDQUFzQixHQUF0QixDQUY4QjtBQUduQyxlQUFLLFVBQVUsSUFBVixDQUFlLElBQWYsRUFBcUIsUUFBckI7QUFIOEIsU0FBckM7QUFLRDtBQUNELFdBQUssSUFBTCxJQUFhLEdBQWIsRUFBa0I7QUFDaEIsWUFBSSxRQUFPLElBQUksSUFBSixDQUFQLE1BQXFCLFFBQXJCLElBQWlDLENBQUMsTUFBTSxPQUFOLENBQWMsSUFBSSxJQUFKLENBQWQsQ0FBdEMsRUFDRSxnQkFBZ0IsSUFBSSxJQUFKLENBQWhCLEVBREYsS0FFSyxVQUFVLElBQVYsRUFBZ0IsSUFBSSxJQUFKLENBQWhCO0FBQ047QUFDRjs7QUFFRCxLQUFDLFVBQVMsSUFBVCxFQUFlLEdBQWYsRUFBb0IsSUFBcEIsRUFBMEI7QUFDekIsVUFBSSxhQUFKLEdBQW9CLEtBQUssR0FBTCxDQUFTLElBQUksSUFBYixFQUFtQixJQUFJLE9BQXZCLENBQXBCO0FBQ0EsVUFBSSxRQUFKLEdBQWUsSUFBSSxJQUFKLEdBQVcsSUFBSSxPQUE5QjtBQUNBLFdBQUssYUFBTCxHQUFxQixLQUFLLE9BQUwsQ0FBYSxNQUFiLEdBQXNCLEtBQUssYUFBaEQ7QUFDQSxXQUFLLGNBQUwsR0FBc0IsS0FBSyxHQUFMLENBQVMsSUFBSSxJQUFiLEVBQW1CLElBQUksT0FBdkIsSUFBa0MsQ0FBeEQ7QUFDRCxLQUxELEVBS0csSUFMSCxFQUtTLEtBQUssT0FMZCxFQUt1QixLQUFLLEtBTDVCOztBQU9BLEtBQUMsVUFBUyxJQUFULEVBQWU7QUFDZCxzQkFBZ0IsS0FBSyxJQUFMLENBQVUsTUFBMUI7QUFDQSxzQkFBZ0IsS0FBSyxJQUFMLENBQVUsTUFBMUI7QUFDRCxLQUhELEVBR0csS0FBSyxPQUhSOztBQUtBLFdBQU8sS0FBSyxJQUFaO0FBQ0EsV0FBTyxJQUFQO0FBRUQ7O0FBMUdlLENBQUQsQ0E0R2QsSUE1R2MsRUFBakIiLCJmaWxlIjoianMvY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyBNYXliZSBtZXJnZSBnZW5lcmFsIGFuZCBydWxlc1xyXG4vLyBUT0RPIFNldHRpbmcgcmFuZG9taXplcnMgaXMgdW50ZXN0ZWRcclxuLy8gVE9ETyBTb21lIHZhbHVlcyBhcmUgY2hhbmdlZCBmb3IgdGVzdCwgcmV2ZXJ0IHRoZW0gbGF0ZXJcclxuLy8gRnVsbCBjb25maWdcclxuVFJJUExFVC5jb25maWcgPSAoe1xyXG5cclxuICBnZW5lcmFsOiB7XHJcbiAgICByb3dzOiA1LCBjb2x1bW5zOiA1LCBkZWZhdWx0Um93c0NvbHM6IDMsIHNpemU6IDQyMCxcclxuICAgIHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAyMCwgbGVmdDogMjBcclxuICB9LFxyXG5cclxuICBydWxlczoge1xyXG4gICAgZW1wdHlWYWw6IDksIHNpZ25zUGVyUm91bmQ6IDEsIHdpbkxlbmd0aDogNFxyXG4gIH0sXHJcblxyXG4gIHBsYXllcnM6IFtcclxuICAgIHsgbmFtZTogJ0FsaWNlJywgYWk6ICdub25lJywgc2lnbklEOiAneCcsIGNvbG9yOiAnI2U0NCcgfSxcclxuICAgIHsgbmFtZTogJ0JvYicsIGFpOiAnaGFyZCcsIHNpZ25JRDogJ28nLCBjb2xvcjogJyMzNWYnIH1cclxuICBdLFxyXG5cclxuICBlbGVtZW50OiB7XHJcbiAgICBsaW5lOiB7XHJcbiAgICAgIHJhbmRvbToge1xyXG4gICAgICAgIGltZ0lEOiBbMCwgMSwgMiwgM10sXHJcbiAgICAgICAgbW92ZTogMTAsIHJvdGF0ZTogMC4wOCwgc2NhbGU6IDAuMDhcclxuICAgICAgfSxcclxuICAgICAgZnJhbWVzOiB7IGluUm93OiAxLCB0b3RhbDogNiwgZGVsYXk6IDMwIH0sICAvLyBkZWxheSAzNlxyXG4gICAgICBjb2xvcjogJyMwMDAnLFxyXG4gICAgICBwYXVzZTogMTIwICAvLyBwYXVzZSAxNjBcclxuICAgIH0sXHJcbiAgICBzaWduOiB7XHJcbiAgICAgIHJhbmRvbToge1xyXG4gICAgICAgIGltZ0lEOiB7IHg6IFs0XSwgbzogWzVdIH0sXHJcbiAgICAgICAgbW92ZTogOCwgcm90YXRlOiAwLjEyLCBzY2FsZTogMC4xXHJcbiAgICAgIH0sXHJcbiAgICAgIGZyYW1lczogeyBpblJvdzogMSwgdG90YWw6IDEsIGRlbGF5OiAwIH0sXHJcbiAgICAgIGNvbG9yOiAnIzAwMCcsXHJcbiAgICAgIHBhdXNlOiAyMDBcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBhc3NldHM6IHtcclxuICAgIGltYWdlczogW1xyXG4gICAgICAnaW1nL2xpbmUtMC5wbmcnLFxyXG4gICAgICAnaW1nL2xpbmUtMS5wbmcnLFxyXG4gICAgICAnaW1nL2xpbmUtMi5wbmcnLFxyXG4gICAgICAnaW1nL2xpbmUtMy5wbmcnLFxyXG4gICAgICAnaW1nL3NpZ24teC0wLnBuZycsXHJcbiAgICAgICdpbWcvc2lnbi1vLTAucG5nJ1xyXG4gICAgXVxyXG4gIH0sXHJcblxyXG4gIGFpOiB7XHJcbiAgICBub25lOiB7XHJcbiAgICAgIHNjb3JlOiB7XHJcbiAgICAgICAgc2lnbjogeyBvd246IDAsIGVuZW15OiAwLCBtYWluRW5lbXk6IDAgfSwgd2luOiAwLCB0aWU6IDBcclxuICAgICAgfSwgZGVwdGg6IDAsIHRvbGVyYW5jZTogMFxyXG4gICAgfSxcclxuICAgIGhhcmQ6IHtcclxuICAgICAgc2NvcmU6IHtcclxuICAgICAgICBzaWduOiB7IG93bjogNiwgZW5lbXk6IDQsIG1haW5FbmVteTogNSB9LCB3aW46IDEwMDAwMCwgdGllOiAxMDBcclxuICAgICAgfSwgZGVwdGg6IDUsIHRvbGVyYW5jZTogNVxyXG4gICAgfSxcclxuICAgIG5vcm1hbDoge1xyXG4gICAgICBzY29yZToge1xyXG4gICAgICAgIHNpZ246IHsgb3duOiA1LCBlbmVteTogNSwgbWFpbkVuZW15OiA1IH0sIHdpbjogMTAwMDAsIHRpZTogNTBcclxuICAgICAgfSwgZGVwdGg6IDMsIHRvbGVyYW5jZTogMTBcclxuICAgIH0sXHJcbiAgICBlYXN5OiB7XHJcbiAgICAgIHNjb3JlOiB7XHJcbiAgICAgICAgc2lnbjogeyBvd246IDUsIGVuZW15OiA1LCBtYWluRW5lbXk6IDUgfSwgd2luOiAxMDAsIHRpZTogMTBcclxuICAgICAgfSwgZGVwdGg6IDEsIHRvbGVyYW5jZTogMzBcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBpbml0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICB2YXIgcmFuZG9tID0gVFJJUExFVC51dGlsaXRpZXMucmFuZG9tO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VSYW5kb21pemVycyhvYmopIHtcclxuICAgICAgdmFyIHByb3A7XHJcbiAgICAgIGZ1bmN0aW9uIHJlbWFrZU9iaihwcm9wZXJ0eSwgdmFsKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcGVydHksIHtcclxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICBnZXQ6IHJhbmRvbS5tYWtlUmFuZG9taXplcih2YWwpLFxyXG4gICAgICAgICAgc2V0OiByZW1ha2VPYmouYmluZChudWxsLCBwcm9wZXJ0eSlcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHByb3AgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9ialtwcm9wXSkpXHJcbiAgICAgICAgICBtYWtlUmFuZG9taXplcnMob2JqW3Byb3BdKTtcclxuICAgICAgICBlbHNlIHJlbWFrZU9iaihwcm9wLCBvYmpbcHJvcF0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgKGZ1bmN0aW9uKHNlbGYsIGNmZywgcnVsZSkge1xyXG4gICAgICBjZmcubWF4TGluZUxlbmd0aCA9IE1hdGgubWluKGNmZy5yb3dzLCBjZmcuY29sdW1ucyk7XHJcbiAgICAgIGNmZy5tYXhUdXJucyA9IGNmZy5yb3dzICogY2ZnLmNvbHVtbnM7XHJcbiAgICAgIHJ1bGUudHVybnNQZXJSb3VuZCA9IHNlbGYucGxheWVycy5sZW5ndGggKiBydWxlLnNpZ25zUGVyUm91bmQ7XHJcbiAgICAgIHJ1bGUubWluVHVybnNGb3JUaWUgPSBNYXRoLm1heChjZmcucm93cywgY2ZnLmNvbHVtbnMpICogMjtcclxuICAgIH0pKHRoaXMsIHRoaXMuZ2VuZXJhbCwgdGhpcy5ydWxlcyk7XHJcblxyXG4gICAgKGZ1bmN0aW9uKGVsZW0pIHtcclxuICAgICAgbWFrZVJhbmRvbWl6ZXJzKGVsZW0ubGluZS5yYW5kb20pO1xyXG4gICAgICBtYWtlUmFuZG9taXplcnMoZWxlbS5zaWduLnJhbmRvbSk7XHJcbiAgICB9KSh0aGlzLmVsZW1lbnQpO1xyXG5cclxuICAgIGRlbGV0ZSB0aGlzLmluaXQ7XHJcbiAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgfVxyXG5cclxufSkuaW5pdCgpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
