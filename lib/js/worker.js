'use strict';

// TODO Refactor handleMessage function
// TODO Later delete TRIPLET object making from here
// Worker script for ai computing
TRIPLET.worker = function () {

  TRIPLET = {};

  onmessage = function () {

    var state, random;

    function handleMessage(e) {
      var answer = {},
          aiStartTime = Date.now();
      if (e.data.move) {
        answer.success = !!state.makeMove(e.data.move.row, e.data.move.col);
        answer.lastMove = state.lastMove;
        answer.wins = state.findWin();
        answer.tie = state.isTie();
        answer.terminate = answer.tie || answer.wins.some(function (val) {
          return val;
        });
      }
      if (e.data.advice) answer.bestMove = random.item(state.findNextBestMoves()) || null;
      answer.player = state.getCurrentPlayer();
      answer.aiSpeed = Date.now() - aiStartTime;
      postMessage(answer);
      if (answer.terminate) close();
    }

    function initialize(data) {
      importScripts(data.href + 'utilities.js', data.href + 'config.js', data.href + 'player.js', data.href + 'state.js');
      state = new TRIPLET.State();
      random = TRIPLET.utilities.random;
    }

    function init(e) {
      try {
        initialize(e.data);
        onmessage = handleMessage;
        postMessage({ init: true });
      } catch (err) {
        postMessage({ init: false, error: err.message });
      }
    }

    return init;
  }();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dvcmtlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLFFBQVEsTUFBUixHQUFpQixZQUFXOztBQUU1QixZQUFVLEVBQVY7O0FBRUEsY0FBYSxZQUFXOztBQUV0QixRQUFJLEtBQUosRUFBVyxNQUFYOztBQUVBLGFBQVMsYUFBVCxDQUF1QixDQUF2QixFQUEwQjtBQUN4QixVQUFJLFNBQVMsRUFBYjtVQUNJLGNBQWMsS0FBSyxHQUFMLEVBRGxCO0FBRUEsVUFBSSxFQUFFLElBQUYsQ0FBTyxJQUFYLEVBQWlCO0FBQ2YsZUFBTyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxNQUFNLFFBQU4sQ0FBZSxFQUFFLElBQUYsQ0FBTyxJQUFQLENBQVksR0FBM0IsRUFBZ0MsRUFBRSxJQUFGLENBQU8sSUFBUCxDQUFZLEdBQTVDLENBQW5CO0FBQ0EsZUFBTyxRQUFQLEdBQWtCLE1BQU0sUUFBeEI7QUFDQSxlQUFPLElBQVAsR0FBYyxNQUFNLE9BQU4sRUFBZDtBQUNBLGVBQU8sR0FBUCxHQUFhLE1BQU0sS0FBTixFQUFiO0FBQ0EsZUFBTyxTQUFQLEdBQW1CLE9BQU8sR0FBUCxJQUNmLE9BQU8sSUFBUCxDQUFZLElBQVosQ0FBaUIsVUFBUyxHQUFULEVBQWM7QUFBRSxpQkFBTyxHQUFQO0FBQWEsU0FBOUMsQ0FESjtBQUVEO0FBQ0QsVUFBSSxFQUFFLElBQUYsQ0FBTyxNQUFYLEVBQ0UsT0FBTyxRQUFQLEdBQWtCLE9BQU8sSUFBUCxDQUFZLE1BQU0saUJBQU4sRUFBWixLQUEwQyxJQUE1RDtBQUNGLGFBQU8sTUFBUCxHQUFnQixNQUFNLGdCQUFOLEVBQWhCO0FBQ0EsYUFBTyxPQUFQLEdBQWlCLEtBQUssR0FBTCxLQUFhLFdBQTlCO0FBQ0Esa0JBQVksTUFBWjtBQUNBLFVBQUksT0FBTyxTQUFYLEVBQXNCO0FBQ3ZCOztBQUVELGFBQVMsVUFBVCxDQUFvQixJQUFwQixFQUEwQjtBQUN4QixvQkFBYyxLQUFLLElBQUwsR0FBWSxjQUExQixFQUEwQyxLQUFLLElBQUwsR0FBWSxXQUF0RCxFQUNjLEtBQUssSUFBTCxHQUFZLFdBRDFCLEVBQ3VDLEtBQUssSUFBTCxHQUFZLFVBRG5EO0FBRUEsY0FBUSxJQUFJLFFBQVEsS0FBWixFQUFSO0FBQ0EsZUFBUyxRQUFRLFNBQVIsQ0FBa0IsTUFBM0I7QUFDRDs7QUFFRCxhQUFTLElBQVQsQ0FBYyxDQUFkLEVBQWlCO0FBQ2YsVUFBSTtBQUNGLG1CQUFXLEVBQUUsSUFBYjtBQUNBLG9CQUFZLGFBQVo7QUFDQSxvQkFBWSxFQUFFLE1BQU0sSUFBUixFQUFaO0FBQ0QsT0FKRCxDQUlFLE9BQU0sR0FBTixFQUFXO0FBQ1gsb0JBQVksRUFBRSxNQUFNLEtBQVIsRUFBZSxPQUFPLElBQUksT0FBMUIsRUFBWjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxJQUFQO0FBRUQsR0ExQ1csRUFBWjtBQTRDQyxDQWhERCIsImZpbGUiOiJqcy93b3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPIFJlZmFjdG9yIGhhbmRsZU1lc3NhZ2UgZnVuY3Rpb25cclxuLy8gVE9ETyBMYXRlciBkZWxldGUgVFJJUExFVCBvYmplY3QgbWFraW5nIGZyb20gaGVyZVxyXG4vLyBXb3JrZXIgc2NyaXB0IGZvciBhaSBjb21wdXRpbmdcclxuVFJJUExFVC53b3JrZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcblRSSVBMRVQgPSB7fTtcclxuXHJcbm9ubWVzc2FnZSA9IChmdW5jdGlvbigpIHtcclxuXHJcbiAgdmFyIHN0YXRlLCByYW5kb207XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZSkge1xyXG4gICAgdmFyIGFuc3dlciA9IHt9LFxyXG4gICAgICAgIGFpU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGlmIChlLmRhdGEubW92ZSkge1xyXG4gICAgICBhbnN3ZXIuc3VjY2VzcyA9ICEhc3RhdGUubWFrZU1vdmUoZS5kYXRhLm1vdmUucm93LCBlLmRhdGEubW92ZS5jb2wpO1xyXG4gICAgICBhbnN3ZXIubGFzdE1vdmUgPSBzdGF0ZS5sYXN0TW92ZTtcclxuICAgICAgYW5zd2VyLndpbnMgPSBzdGF0ZS5maW5kV2luKCk7XHJcbiAgICAgIGFuc3dlci50aWUgPSBzdGF0ZS5pc1RpZSgpO1xyXG4gICAgICBhbnN3ZXIudGVybWluYXRlID0gYW5zd2VyLnRpZSB8fFxyXG4gICAgICAgICAgYW5zd2VyLndpbnMuc29tZShmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbDsgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZS5kYXRhLmFkdmljZSlcclxuICAgICAgYW5zd2VyLmJlc3RNb3ZlID0gcmFuZG9tLml0ZW0oc3RhdGUuZmluZE5leHRCZXN0TW92ZXMoKSkgfHwgbnVsbDtcclxuICAgIGFuc3dlci5wbGF5ZXIgPSBzdGF0ZS5nZXRDdXJyZW50UGxheWVyKCk7XHJcbiAgICBhbnN3ZXIuYWlTcGVlZCA9IERhdGUubm93KCkgLSBhaVN0YXJ0VGltZTtcclxuICAgIHBvc3RNZXNzYWdlKGFuc3dlcik7XHJcbiAgICBpZiAoYW5zd2VyLnRlcm1pbmF0ZSkgY2xvc2UoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoZGF0YSkge1xyXG4gICAgaW1wb3J0U2NyaXB0cyhkYXRhLmhyZWYgKyAndXRpbGl0aWVzLmpzJywgZGF0YS5ocmVmICsgJ2NvbmZpZy5qcycsXHJcbiAgICAgICAgICAgICAgICAgIGRhdGEuaHJlZiArICdwbGF5ZXIuanMnLCBkYXRhLmhyZWYgKyAnc3RhdGUuanMnKTtcclxuICAgIHN0YXRlID0gbmV3IFRSSVBMRVQuU3RhdGUoKTtcclxuICAgIHJhbmRvbSA9IFRSSVBMRVQudXRpbGl0aWVzLnJhbmRvbTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluaXQoZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaW5pdGlhbGl6ZShlLmRhdGEpO1xyXG4gICAgICBvbm1lc3NhZ2UgPSBoYW5kbGVNZXNzYWdlO1xyXG4gICAgICBwb3N0TWVzc2FnZSh7IGluaXQ6IHRydWUgfSk7XHJcbiAgICB9IGNhdGNoKGVycikge1xyXG4gICAgICBwb3N0TWVzc2FnZSh7IGluaXQ6IGZhbHNlLCBlcnJvcjogZXJyLm1lc3NhZ2UgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaW5pdDtcclxuXHJcbn0pKCk7XHJcblxyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
