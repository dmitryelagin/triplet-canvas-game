'use strict';

// TODO Delete distance method if not needed
// TODO Maybe rewrite constructor and bisector method to keep angle in PI range
// Lines constructor, using slopeâ€“intercept form for setup
TRIPLET.Line = function () {

  var Line = function Line(setup) {
    this.angle = parseFloat(setup.angle) % (Math.PI * 2) || 0;
    this.x = parseFloat(setup.x) || 0;
    this.y = parseFloat(setup.y) || 0;
    this.a = Math.tan(this.angle);
    this.b = -1;
    this.c = this.y - this.a * this.x;
    Object.freeze(this);
  };

  Line.isLine = function (line) {
    if (line instanceof Line) return line;
    throw new TypeError('Argument is not instance of Line: ' + line);
  };

  Line.prototype = {

    constructor: TRIPLET.Line,

    distanceFrom: function distanceFrom(x, y) {
      var distance = (this.a * x + this.b * y + this.c) / Math.sqrt(Math.pow(this.a, 2) + Math.pow(this.b, 2));
      if (typeof distance === 'number' && !isNaN(distance)) return distance;
      throw new TypeError('Wrong point coordinates: ' + x + ' / ' + y);
    },

    intersects: function intersects(line, accuracy) {
      var divider;
      Line.isLine(line);
      accuracy = accuracy || 8;
      divider = this.a * line.b - line.a * this.b;
      if (divider !== 0) return {
        x: -((this.c * line.b - line.c * this.b) / divider).toFixed(accuracy),
        y: -((this.a * line.c - line.a * this.c) / divider).toFixed(accuracy)
      };
    },

    getBisector: function getBisector(line) {
      Line.isLine(line);
      return new Line({
        x: (this.x + line.x) / 2,
        y: (this.y + line.y) / 2,
        angle: (this.angle + line.angle) / 2
      });
    }

  };

  return Line;
}();
//# sourceMappingURL=data:application/json;base64,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ZiIsImZpbGUiOiJqcy9saW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyBEZWxldGUgZGlzdGFuY2UgbWV0aG9kIGlmIG5vdCBuZWVkZWRcclxuLy8gVE9ETyBNYXliZSByZXdyaXRlIGNvbnN0cnVjdG9yIGFuZCBiaXNlY3RvciBtZXRob2QgdG8ga2VlcCBhbmdsZSBpbiBQSSByYW5nZVxyXG4vLyBMaW5lcyBjb25zdHJ1Y3RvciwgdXNpbmcgc2xvcGXigJNpbnRlcmNlcHQgZm9ybSBmb3Igc2V0dXBcclxuVFJJUExFVC5MaW5lID0gKGZ1bmN0aW9uKCkge1xyXG5cclxudmFyIExpbmUgPSBmdW5jdGlvbihzZXR1cCkge1xyXG4gIHRoaXMuYW5nbGUgPSBwYXJzZUZsb2F0KHNldHVwLmFuZ2xlKSAlIChNYXRoLlBJICogMikgfHwgMDtcclxuICB0aGlzLnggPSBwYXJzZUZsb2F0KHNldHVwLngpIHx8IDA7XHJcbiAgdGhpcy55ID0gcGFyc2VGbG9hdChzZXR1cC55KSB8fCAwO1xyXG4gIHRoaXMuYSA9IE1hdGgudGFuKHRoaXMuYW5nbGUpO1xyXG4gIHRoaXMuYiA9IC0xO1xyXG4gIHRoaXMuYyA9IHRoaXMueSAtIHRoaXMuYSAqIHRoaXMueDtcclxuICBPYmplY3QuZnJlZXplKHRoaXMpO1xyXG59O1xyXG5cclxuTGluZS5pc0xpbmUgPSBmdW5jdGlvbihsaW5lKSB7XHJcbiAgaWYgKGxpbmUgaW5zdGFuY2VvZiBMaW5lKSByZXR1cm4gbGluZTtcclxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBpcyBub3QgaW5zdGFuY2Ugb2YgTGluZTogJyArIGxpbmUpO1xyXG59O1xyXG5cclxuTGluZS5wcm90b3R5cGUgPSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yOiBUUklQTEVULkxpbmUsXHJcblxyXG4gIGRpc3RhbmNlRnJvbTogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgdmFyIGRpc3RhbmNlID0gKHRoaXMuYSAqIHggKyB0aGlzLmIgKiB5ICsgdGhpcy5jKSAvXHJcbiAgICAgICAgTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMuYSwgMikgKyBNYXRoLnBvdyh0aGlzLmIsIDIpKTtcclxuICAgIGlmICh0eXBlb2YgZGlzdGFuY2UgPT09ICdudW1iZXInICYmICFpc05hTihkaXN0YW5jZSkpIHJldHVybiBkaXN0YW5jZTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dyb25nIHBvaW50IGNvb3JkaW5hdGVzOiAnICsgeCArICcgLyAnICsgeSk7XHJcbiAgfSxcclxuXHJcbiAgaW50ZXJzZWN0czogZnVuY3Rpb24obGluZSwgYWNjdXJhY3kpIHtcclxuICAgIHZhciBkaXZpZGVyO1xyXG4gICAgTGluZS5pc0xpbmUobGluZSk7XHJcbiAgICBhY2N1cmFjeSA9IGFjY3VyYWN5IHx8IDg7XHJcbiAgICBkaXZpZGVyID0gdGhpcy5hICogbGluZS5iIC0gbGluZS5hICogdGhpcy5iO1xyXG4gICAgaWYgKGRpdmlkZXIgIT09IDApXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgeDogLSgodGhpcy5jICogbGluZS5iIC0gbGluZS5jICogdGhpcy5iKSAvIGRpdmlkZXIpLnRvRml4ZWQoYWNjdXJhY3kpLFxyXG4gICAgICAgIHk6IC0oKHRoaXMuYSAqIGxpbmUuYyAtIGxpbmUuYSAqIHRoaXMuYykgLyBkaXZpZGVyKS50b0ZpeGVkKGFjY3VyYWN5KVxyXG4gICAgICB9O1xyXG4gIH0sXHJcblxyXG4gIGdldEJpc2VjdG9yOiBmdW5jdGlvbihsaW5lKSB7XHJcbiAgICBMaW5lLmlzTGluZShsaW5lKTtcclxuICAgIHJldHVybiBuZXcgTGluZSh7XHJcbiAgICAgIHg6ICh0aGlzLnggKyBsaW5lLngpIC8gMixcclxuICAgICAgeTogKHRoaXMueSArIGxpbmUueSkgLyAyLFxyXG4gICAgICBhbmdsZTogKHRoaXMuYW5nbGUgKyBsaW5lLmFuZ2xlKSAvIDJcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn07XHJcblxyXG5yZXR1cm4gTGluZTtcclxuXHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
