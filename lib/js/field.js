"use strict";

// TODO Remove this.canvas if not needed
// Field constructor
TRIPLET.Field = function () {

  var cfg = TRIPLET.config.general,
      elem = TRIPLET.config.element,
      Line = TRIPLET.Line,
      Field;

  Field = function Field() {

    var cellSize = Math.min(cfg.size / cfg.columns, cfg.size / cfg.rows);

    this.width = cellSize * cfg.columns;
    this.height = cellSize * cfg.rows;
    this.cell = { width: cellSize, height: cellSize };
    this.canvas = {
      width: cfg.left + this.width + cfg.right,
      height: cfg.top + this.height + cfg.bottom
    };

    this.lines = function (self) {

      function linesFactory(count, getCfg) {
        var i,
            lineCfg,
            storage = [];
        for (i = 0; i <= count; i++) {
          lineCfg = getCfg(i);
          if (i !== 0 && i !== count) {
            lineCfg.x += elem.line.random.move;
            lineCfg.y += elem.line.random.move;
            lineCfg.angle += elem.line.random.rotate;
          }
          storage.push(new Line(lineCfg));
        }
        return storage;
      }

      return {
        hor: linesFactory(cfg.rows, function (index) {
          return {
            x: cfg.left + self.width / 2,
            y: cfg.top + self.cell.height * index,
            angle: 0
          };
        }),
        ver: linesFactory(cfg.columns, function (index) {
          return {
            x: cfg.left + self.cell.width * index,
            y: cfg.top + self.height / 2,
            angle: Math.PI / 2
          };
        })
      };
    }(this);

    this.lines.visible = function (ln) {
      return ln.ver.slice(1, -1).concat(ln.hor.slice(1, -1));
    }(this.lines);

    Object.freeze(this);
  };

  Field.prototype = {

    constructor: TRIPLET.Field,

    getCellCenter: function getCellCenter(row, col) {
      var rowCenter = this.lines.hor[row].getBisector(this.lines.hor[row + 1]),
          colCenter = this.lines.ver[col].getBisector(this.lines.ver[col + 1]);
      return rowCenter.intersects(colCenter);
    },

    getCellPosition: function getCellPosition(x, y) {
      var horizontal = new Line({ x: x, y: y, angle: 0 });
      vertical = new Line({ x: x, y: y, angle: Math.PI / 2 });
      function getPosition(lines, ruler) {
        var dot,
            i = 0;
        do {
          dot = lines[i].intersects(ruler);
        } while (dot.x <= x && dot.y <= y && ++i < lines.length);
        return i;
      }
      return {
        row: getPosition(this.lines.hor.slice(1, -1), vertical),
        col: getPosition(this.lines.ver.slice(1, -1), horizontal)
      };
    }

  };

  return Field;
}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2ZpZWxkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxRQUFRLEtBQVIsR0FBaUIsWUFBVzs7QUFFNUIsTUFBSSxNQUFNLFFBQVEsTUFBUixDQUFlLE9BQXpCO01BQ0ksT0FBTyxRQUFRLE1BQVIsQ0FBZSxPQUQxQjtNQUVJLE9BQU8sUUFBUSxJQUZuQjtNQUdJLEtBSEo7O0FBS0EsVUFBUSxpQkFBVzs7QUFFakIsUUFBSSxXQUFXLEtBQUssR0FBTCxDQUFTLElBQUksSUFBSixHQUFXLElBQUksT0FBeEIsRUFBaUMsSUFBSSxJQUFKLEdBQVcsSUFBSSxJQUFoRCxDQUFmOztBQUVBLFNBQUssS0FBTCxHQUFhLFdBQVcsSUFBSSxPQUE1QjtBQUNBLFNBQUssTUFBTCxHQUFjLFdBQVcsSUFBSSxJQUE3QjtBQUNBLFNBQUssSUFBTCxHQUFZLEVBQUUsT0FBTyxRQUFULEVBQW1CLFFBQVEsUUFBM0IsRUFBWjtBQUNBLFNBQUssTUFBTCxHQUFjO0FBQ1osYUFBTyxJQUFJLElBQUosR0FBVyxLQUFLLEtBQWhCLEdBQXdCLElBQUksS0FEdkI7QUFFWixjQUFRLElBQUksR0FBSixHQUFVLEtBQUssTUFBZixHQUF3QixJQUFJO0FBRnhCLEtBQWQ7O0FBS0EsU0FBSyxLQUFMLEdBQWMsVUFBUyxJQUFULEVBQWU7O0FBRTNCLGVBQVMsWUFBVCxDQUFzQixLQUF0QixFQUE2QixNQUE3QixFQUFxQztBQUNuQyxZQUFJLENBQUo7WUFBTyxPQUFQO1lBQWdCLFVBQVUsRUFBMUI7QUFDQSxhQUFLLElBQUksQ0FBVCxFQUFZLEtBQUssS0FBakIsRUFBd0IsR0FBeEIsRUFBNkI7QUFDM0Isb0JBQVUsT0FBTyxDQUFQLENBQVY7QUFDQSxjQUFJLE1BQU0sQ0FBTixJQUFXLE1BQU0sS0FBckIsRUFBNEI7QUFDMUIsb0JBQVEsQ0FBUixJQUFhLEtBQUssSUFBTCxDQUFVLE1BQVYsQ0FBaUIsSUFBOUI7QUFDQSxvQkFBUSxDQUFSLElBQWEsS0FBSyxJQUFMLENBQVUsTUFBVixDQUFpQixJQUE5QjtBQUNBLG9CQUFRLEtBQVIsSUFBaUIsS0FBSyxJQUFMLENBQVUsTUFBVixDQUFpQixNQUFsQztBQUNEO0FBQ0Qsa0JBQVEsSUFBUixDQUFhLElBQUksSUFBSixDQUFTLE9BQVQsQ0FBYjtBQUNEO0FBQ0QsZUFBTyxPQUFQO0FBQ0Q7O0FBRUQsYUFBTztBQUNMLGFBQUssYUFBYSxJQUFJLElBQWpCLEVBQXVCLFVBQVMsS0FBVCxFQUFnQjtBQUMxQyxpQkFBTztBQUNMLGVBQUcsSUFBSSxJQUFKLEdBQVcsS0FBSyxLQUFMLEdBQWEsQ0FEdEI7QUFFTCxlQUFHLElBQUksR0FBSixHQUFVLEtBQUssSUFBTCxDQUFVLE1BQVYsR0FBbUIsS0FGM0I7QUFHTCxtQkFBTztBQUhGLFdBQVA7QUFLRCxTQU5JLENBREE7QUFRTCxhQUFLLGFBQWEsSUFBSSxPQUFqQixFQUEwQixVQUFTLEtBQVQsRUFBZ0I7QUFDN0MsaUJBQU87QUFDTCxlQUFHLElBQUksSUFBSixHQUFXLEtBQUssSUFBTCxDQUFVLEtBQVYsR0FBa0IsS0FEM0I7QUFFTCxlQUFHLElBQUksR0FBSixHQUFVLEtBQUssTUFBTCxHQUFjLENBRnRCO0FBR0wsbUJBQU8sS0FBSyxFQUFMLEdBQVU7QUFIWixXQUFQO0FBS0QsU0FOSTtBQVJBLE9BQVA7QUFpQkQsS0FqQ1ksQ0FpQ1YsSUFqQ1UsQ0FBYjs7QUFtQ0EsU0FBSyxLQUFMLENBQVcsT0FBWCxHQUFzQixVQUFTLEVBQVQsRUFBYTtBQUNqQyxhQUFPLEdBQUcsR0FBSCxDQUFPLEtBQVAsQ0FBYSxDQUFiLEVBQWdCLENBQUMsQ0FBakIsRUFBb0IsTUFBcEIsQ0FBMkIsR0FBRyxHQUFILENBQU8sS0FBUCxDQUFhLENBQWIsRUFBZ0IsQ0FBQyxDQUFqQixDQUEzQixDQUFQO0FBQ0QsS0FGb0IsQ0FFbEIsS0FBSyxLQUZhLENBQXJCOztBQUlBLFdBQU8sTUFBUCxDQUFjLElBQWQ7QUFFRCxHQXJERDs7QUF1REEsUUFBTSxTQUFOLEdBQWtCOztBQUVoQixpQkFBYSxRQUFRLEtBRkw7O0FBSWhCLG1CQUFlLHVCQUFTLEdBQVQsRUFBYyxHQUFkLEVBQW1CO0FBQ2hDLFVBQUksWUFBWSxLQUFLLEtBQUwsQ0FBVyxHQUFYLENBQWUsR0FBZixFQUFvQixXQUFwQixDQUFnQyxLQUFLLEtBQUwsQ0FBVyxHQUFYLENBQWUsTUFBTSxDQUFyQixDQUFoQyxDQUFoQjtVQUNJLFlBQVksS0FBSyxLQUFMLENBQVcsR0FBWCxDQUFlLEdBQWYsRUFBb0IsV0FBcEIsQ0FBZ0MsS0FBSyxLQUFMLENBQVcsR0FBWCxDQUFlLE1BQU0sQ0FBckIsQ0FBaEMsQ0FEaEI7QUFFQSxhQUFPLFVBQVUsVUFBVixDQUFxQixTQUFyQixDQUFQO0FBQ0QsS0FSZTs7QUFVaEIscUJBQWlCLHlCQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDOUIsVUFBSSxhQUFhLElBQUksSUFBSixDQUFTLEVBQUUsR0FBRyxDQUFMLEVBQVEsR0FBRyxDQUFYLEVBQWMsT0FBTyxDQUFyQixFQUFULENBQWpCO0FBQ0ksaUJBQVcsSUFBSSxJQUFKLENBQVMsRUFBRSxHQUFHLENBQUwsRUFBUSxHQUFHLENBQVgsRUFBYyxPQUFPLEtBQUssRUFBTCxHQUFVLENBQS9CLEVBQVQsQ0FBWDtBQUNKLGVBQVMsV0FBVCxDQUFxQixLQUFyQixFQUE0QixLQUE1QixFQUFtQztBQUNqQyxZQUFJLEdBQUo7WUFBUyxJQUFJLENBQWI7QUFDQSxXQUFHO0FBQ0QsZ0JBQU0sTUFBTSxDQUFOLEVBQVMsVUFBVCxDQUFvQixLQUFwQixDQUFOO0FBQ0QsU0FGRCxRQUVTLElBQUksQ0FBSixJQUFTLENBQVQsSUFBYyxJQUFJLENBQUosSUFBUyxDQUF2QixJQUE0QixFQUFFLENBQUYsR0FBTSxNQUFNLE1BRmpEO0FBR0EsZUFBTyxDQUFQO0FBQ0Q7QUFDRCxhQUFPO0FBQ0wsYUFBSyxZQUFZLEtBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxLQUFmLENBQXFCLENBQXJCLEVBQXdCLENBQUMsQ0FBekIsQ0FBWixFQUF5QyxRQUF6QyxDQURBO0FBRUwsYUFBSyxZQUFZLEtBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZSxLQUFmLENBQXFCLENBQXJCLEVBQXdCLENBQUMsQ0FBekIsQ0FBWixFQUF5QyxVQUF6QztBQUZBLE9BQVA7QUFJRDs7QUF4QmUsR0FBbEI7O0FBNEJBLFNBQU8sS0FBUDtBQUVDLENBNUZlLEVBQWhCIiwiZmlsZSI6ImpzL2ZpZWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyBSZW1vdmUgdGhpcy5jYW52YXMgaWYgbm90IG5lZWRlZFxyXG4vLyBGaWVsZCBjb25zdHJ1Y3RvclxyXG5UUklQTEVULkZpZWxkID0gKGZ1bmN0aW9uKCkge1xyXG5cclxudmFyIGNmZyA9IFRSSVBMRVQuY29uZmlnLmdlbmVyYWwsXHJcbiAgICBlbGVtID0gVFJJUExFVC5jb25maWcuZWxlbWVudCxcclxuICAgIExpbmUgPSBUUklQTEVULkxpbmUsXHJcbiAgICBGaWVsZDtcclxuXHJcbkZpZWxkID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gIHZhciBjZWxsU2l6ZSA9IE1hdGgubWluKGNmZy5zaXplIC8gY2ZnLmNvbHVtbnMsIGNmZy5zaXplIC8gY2ZnLnJvd3MpO1xyXG5cclxuICB0aGlzLndpZHRoID0gY2VsbFNpemUgKiBjZmcuY29sdW1ucztcclxuICB0aGlzLmhlaWdodCA9IGNlbGxTaXplICogY2ZnLnJvd3M7XHJcbiAgdGhpcy5jZWxsID0geyB3aWR0aDogY2VsbFNpemUsIGhlaWdodDogY2VsbFNpemUgfTtcclxuICB0aGlzLmNhbnZhcyA9IHtcclxuICAgIHdpZHRoOiBjZmcubGVmdCArIHRoaXMud2lkdGggKyBjZmcucmlnaHQsXHJcbiAgICBoZWlnaHQ6IGNmZy50b3AgKyB0aGlzLmhlaWdodCArIGNmZy5ib3R0b21cclxuICB9O1xyXG5cclxuICB0aGlzLmxpbmVzID0gKGZ1bmN0aW9uKHNlbGYpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBsaW5lc0ZhY3RvcnkoY291bnQsIGdldENmZykge1xyXG4gICAgICB2YXIgaSwgbGluZUNmZywgc3RvcmFnZSA9IFtdO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IGNvdW50OyBpKyspIHtcclxuICAgICAgICBsaW5lQ2ZnID0gZ2V0Q2ZnKGkpO1xyXG4gICAgICAgIGlmIChpICE9PSAwICYmIGkgIT09IGNvdW50KSB7XHJcbiAgICAgICAgICBsaW5lQ2ZnLnggKz0gZWxlbS5saW5lLnJhbmRvbS5tb3ZlO1xyXG4gICAgICAgICAgbGluZUNmZy55ICs9IGVsZW0ubGluZS5yYW5kb20ubW92ZTtcclxuICAgICAgICAgIGxpbmVDZmcuYW5nbGUgKz0gZWxlbS5saW5lLnJhbmRvbS5yb3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0b3JhZ2UucHVzaChuZXcgTGluZShsaW5lQ2ZnKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHN0b3JhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaG9yOiBsaW5lc0ZhY3RvcnkoY2ZnLnJvd3MsIGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHg6IGNmZy5sZWZ0ICsgc2VsZi53aWR0aCAvIDIsXHJcbiAgICAgICAgICB5OiBjZmcudG9wICsgc2VsZi5jZWxsLmhlaWdodCAqIGluZGV4LFxyXG4gICAgICAgICAgYW5nbGU6IDBcclxuICAgICAgICB9O1xyXG4gICAgICB9KSxcclxuICAgICAgdmVyOiBsaW5lc0ZhY3RvcnkoY2ZnLmNvbHVtbnMsIGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHg6IGNmZy5sZWZ0ICsgc2VsZi5jZWxsLndpZHRoICogaW5kZXgsXHJcbiAgICAgICAgICB5OiBjZmcudG9wICsgc2VsZi5oZWlnaHQgLyAyLFxyXG4gICAgICAgICAgYW5nbGU6IE1hdGguUEkgLyAyXHJcbiAgICAgICAgfTtcclxuICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gIH0pKHRoaXMpO1xyXG5cclxuICB0aGlzLmxpbmVzLnZpc2libGUgPSAoZnVuY3Rpb24obG4pIHtcclxuICAgIHJldHVybiBsbi52ZXIuc2xpY2UoMSwgLTEpLmNvbmNhdChsbi5ob3Iuc2xpY2UoMSwgLTEpKTtcclxuICB9KSh0aGlzLmxpbmVzKTtcclxuXHJcbiAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcclxuXHJcbn07XHJcblxyXG5GaWVsZC5wcm90b3R5cGUgPSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yOiBUUklQTEVULkZpZWxkLFxyXG5cclxuICBnZXRDZWxsQ2VudGVyOiBmdW5jdGlvbihyb3csIGNvbCkge1xyXG4gICAgdmFyIHJvd0NlbnRlciA9IHRoaXMubGluZXMuaG9yW3Jvd10uZ2V0QmlzZWN0b3IodGhpcy5saW5lcy5ob3Jbcm93ICsgMV0pLFxyXG4gICAgICAgIGNvbENlbnRlciA9IHRoaXMubGluZXMudmVyW2NvbF0uZ2V0QmlzZWN0b3IodGhpcy5saW5lcy52ZXJbY29sICsgMV0pO1xyXG4gICAgcmV0dXJuIHJvd0NlbnRlci5pbnRlcnNlY3RzKGNvbENlbnRlcik7XHJcbiAgfSxcclxuXHJcbiAgZ2V0Q2VsbFBvc2l0aW9uOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICB2YXIgaG9yaXpvbnRhbCA9IG5ldyBMaW5lKHsgeDogeCwgeTogeSwgYW5nbGU6IDAgfSk7XHJcbiAgICAgICAgdmVydGljYWwgPSBuZXcgTGluZSh7IHg6IHgsIHk6IHksIGFuZ2xlOiBNYXRoLlBJIC8gMiB9KTtcclxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uKGxpbmVzLCBydWxlcikge1xyXG4gICAgICB2YXIgZG90LCBpID0gMDtcclxuICAgICAgZG8ge1xyXG4gICAgICAgIGRvdCA9IGxpbmVzW2ldLmludGVyc2VjdHMocnVsZXIpO1xyXG4gICAgICB9IHdoaWxlIChkb3QueCA8PSB4ICYmIGRvdC55IDw9IHkgJiYgKytpIDwgbGluZXMubGVuZ3RoKTtcclxuICAgICAgcmV0dXJuIGk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByb3c6IGdldFBvc2l0aW9uKHRoaXMubGluZXMuaG9yLnNsaWNlKDEsIC0xKSwgdmVydGljYWwpLFxyXG4gICAgICBjb2w6IGdldFBvc2l0aW9uKHRoaXMubGluZXMudmVyLnNsaWNlKDEsIC0xKSwgaG9yaXpvbnRhbClcclxuICAgIH07XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbnJldHVybiBGaWVsZDtcclxuXHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
